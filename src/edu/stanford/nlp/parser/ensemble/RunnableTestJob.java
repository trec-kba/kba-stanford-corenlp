package edu.stanford.nlp.parser.ensemble;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import edu.stanford.nlp.parser.ensemble.maltparser.MaltConsoleEngine;
import edu.stanford.nlp.parser.ensemble.maltparser.core.helper.SystemLogger;
import edu.stanford.nlp.parser.ensemble.utils.Now;
import edu.stanford.nlp.parser.ensemble.utils.ReverseCorpus;
import edu.stanford.nlp.parser.ensemble.utils.Scorer;
import edu.stanford.nlp.parser.ensemble.utils.Scorer.Score;

public class RunnableTestJob extends BaseModelRunnableJob implements Runnable {
	public RunnableTestJob(Ensemble ensemble, int index) {
		super(ensemble, index);
	}

	@Override
	public void run() {
		SystemLogger.logger().info("Starting job " + ensemble.baseModels[baseModelIndex] + " at " + new Now() + "...\n");
		createWorkingDirectory();
		
		// args for malt
		String [] params = makeMaltEngineParameters();
		
		// run malt
		MaltConsoleEngine engine = new MaltConsoleEngine();
		engine.startEngine(params);
		
		// reverse output if right-to-left
		if(! leftToRight){
			File origFile = new File(ensemble.workingDirectory + File.separator + ensemble.outputPrefix + "." + ensemble.modelName + "-" + baseModel + ".reversed");
			File reversedFile = new File(ensemble.workingDirectory + File.separator + ensemble.outputPrefix + "." + ensemble.modelName + "-" + baseModel);
			try {
				ReverseCorpus.reverseCorpus(origFile.getAbsolutePath(), reversedFile.getAbsolutePath());
				origFile.delete();
			} catch(IOException e) {
				SystemLogger.logger().error("Failed to reverse file " + origFile.getAbsolutePath() + " to " + reversedFile + "!\n");
				e.printStackTrace();
				throw new RuntimeException(e);
			}
		}
		
		// score this model
		String sysFile = ensemble.workingDirectory + File.separator + ensemble.outputPrefix + "." + ensemble.modelName + "-" + baseModel;
		Score s = null;
		try {
			s = Scorer.evaluate(ensemble.testCorpus, sysFile);
		} catch(IOException e) {
			e.printStackTrace();
			System.err.println("WARNING: Cannot open files generated by model " + baseModel);
		}
		if(s != null){
			SystemLogger.logger().info(String.format(baseModel + " LAS: %.2f %d/%d\n", s.las, s.lcorrect, s.total));
			SystemLogger.logger().info(String.format(baseModel + " UAS: %.2f %d/%d\n", s.uas, s.ucorrect, s.total));
		}
		
		ensemble.threadFinished();
		SystemLogger.logger().info("Ended job " + baseModel + " at " + new Now() + ".\n");
	}
	
	private String [] makeMaltEngineParameters() {
		List<String> pars = new ArrayList<String>();
		
		pars.add("-m");
		pars.add("parse");

		pars.add("-c");
		pars.add(ensemble.modelName + "-" + baseModel);
		
		pars.add("-l");
		pars.add("liblinear");
		
		pars.add("-llv");
		pars.add(ensemble.libLinearLogLevel);
		
		pars.add("-v");
		pars.add(ensemble.logLevel);
		
		pars.add("-w");
		pars.add(workingDirectory.getAbsolutePath());
		
		pars.add("-md");
		pars.add(new File(ensemble.modelDirectory).getAbsolutePath());
		
		pars.add("-i");
		if(leftToRight) pars.add(ensemble.testCorpus);
		else{
			File origFile = new File(ensemble.testCorpus);
			File reversedFile = new File(ensemble.workingDirectory + File.separator + origFile.getName() + ".reversed");
			pars.add(reversedFile.getAbsolutePath());
		}
		
		pars.add("-o");
		if(leftToRight)	pars.add(ensemble.workingDirectory + File.separator + ensemble.outputPrefix + "." + ensemble.modelName + "-" + baseModel);
		else pars.add(ensemble.workingDirectory + File.separator + ensemble.outputPrefix + "." + ensemble.modelName + "-" + baseModel + ".reversed");
		
		String [] parameters = new String[pars.size()];
		pars.toArray(parameters);
		return parameters;
	}
}
