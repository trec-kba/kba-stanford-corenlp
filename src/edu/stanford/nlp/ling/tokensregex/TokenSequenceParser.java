/* Generated By:JavaCC: Do not edit this line. TokenSequenceParser.java */
package edu.stanford.nlp.ling.tokensregex;
// all generated classes are in this package

//imports
import edu.stanford.nlp.util.CoreMap;
import edu.stanford.nlp.util.ArrayMap;
import edu.stanford.nlp.util.Pair;
import java.io.StringReader;
import java.util.*;

class TokenSequenceParser implements SequencePattern.Parser<CoreMap>, TokenSequenceParserConstants {
    TokenSequenceParser() {}

        /*static */
        public SequencePattern.PatternExpr parseSequence(TokenSequencePattern.Env env, String s) throws ParseException {
        /*	if (jj_initialized_once) {
     			ReInit(new StringReader(s));
    		} else {
      		    new TokenSequenceParser(new StringReader(s));
    		}
    		return SeqRegex(env);      */
        TokenSequenceParser p = new TokenSequenceParser(new StringReader(s));
        return p.SeqRegex(env);
        }

        /*static*/
        public Pair<SequencePattern.PatternExpr, SequenceMatchAction<CoreMap>> parseSequenceWithAction(TokenSequencePattern.Env env, String s) throws ParseException {
        /*	if (jj_initialized_once) {
     			ReInit(new StringReader(s));
    		} else {
      		    new TokenSequenceParser(new StringReader(s));
    		}
    		return SeqRegex(env);      */
        TokenSequenceParser p = new TokenSequenceParser(new StringReader(s));
        return p.SeqRegexWithAction(env);
        }

        /*static*/
        public SequencePattern.PatternExpr parseNode(TokenSequencePattern.Env env, String s) throws ParseException {
/*     		if (jj_initialized_once) {
     			ReInit(new StringReader(s));
    		} else {
      		    new TokenSequenceParser(new StringReader(s));
    		}
    		NodePattern n = Node(env);
    		return new SequencePattern.NodePatternExpr(n);                      */
        TokenSequenceParser p = new TokenSequenceParser(new StringReader(s));
        NodePattern n = p.Node(env);
        return new SequencePattern.NodePatternExpr(n);
        }

  final public SequencePattern.PatternExpr SeqRegex(SequencePattern.Env env) throws ParseException {
  SequencePattern.PatternExpr expr;
    expr = SeqRegexDisj(env);
                                    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public SequencePattern.PatternExpr SeqRegexBasic(SequencePattern.Env env) throws ParseException {
  List<SequencePattern.PatternExpr> children = new ArrayList<SequencePattern.PatternExpr>();
  NodePattern node;
  MultiNodePattern multiNode;
  SequencePattern.PatternExpr expr;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        node = BracketedNode(env);
                                        expr = new SequencePattern.NodePatternExpr(node);
        break;
      case IDENTIFIER:
      case REGEX:
      case STR:
      case BARESTR:
        node = CoreMapWordPattern(env);
                                             expr = new SequencePattern.NodePatternExpr(node);
        break;
      case 30:
        multiNode = MultiNodePattern(env);
                                                expr = new SequencePattern.MultiNodePatternExpr(multiNode);
        break;
      case 20:
        expr = SeqRegexGroup(env);
        break;
      case VAR:
        expr = SeqVar(env);
        break;
      case BACKREF:
        expr = SeqBackRef(env);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
      case 14:
      case 15:
      case 16:
        expr = SeqRegexRepeatTimes(env, expr);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
         children.add(expr);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case VAR:
      case BACKREF:
      case REGEX:
      case STR:
      case BARESTR:
      case 20:
      case 23:
      case 30:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
          if (children.size() == 1) {if (true) return expr;}
          else {if (true) return new SequencePattern.SequencePatternExpr(children);}
    throw new Error("Missing return statement in function");
  }

  final public SequencePattern.PatternExpr SeqRegexRepeatTimes(SequencePattern.Env env, SequencePattern.PatternExpr expr) throws ParseException {
   Token value;
   Token v2;
   int min = -1;
   int max = -1;
   boolean greedy = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      value = jj_consume_token(13);
                          min = 0; max = -1;
      break;
    case 14:
      value = jj_consume_token(14);
                          min = 0; max = 1;
      break;
    case 15:
      value = jj_consume_token(15);
                          min = 1; max = -1;
      break;
    default:
      jj_la1[3] = jj_gen;
      if (jj_2_1(3)) {
        jj_consume_token(16);
        value = jj_consume_token(INT);
        jj_consume_token(17);
                                    min = Integer.parseInt(value.image); max = min;
      } else if (jj_2_2(4)) {
        jj_consume_token(16);
        value = jj_consume_token(INT);
        jj_consume_token(18);
        jj_consume_token(17);
                                        min = Integer.parseInt(value.image); max = -1;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          jj_consume_token(16);
          value = jj_consume_token(INT);
          jj_consume_token(18);
          v2 = jj_consume_token(INT);
          jj_consume_token(17);
                                                    min = Integer.parseInt(value.image); max = Integer.parseInt(v2.image);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      jj_consume_token(14);
             greedy = false;
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
      {if (true) return new SequencePattern.RepeatPatternExpr(expr, min, max, greedy);}
    throw new Error("Missing return statement in function");
  }

  final public SequencePattern.PatternExpr SeqRegexDisj(SequencePattern.Env env) throws ParseException {
  List<SequencePattern.PatternExpr> children = new ArrayList<SequencePattern.PatternExpr>();
  SequencePattern.PatternExpr expr;
  boolean capturing = true;
    expr = SeqRegexBasic(env);
                                    children.add(expr);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(19);
      expr = SeqRegexBasic(env);
                                         children.add(expr);
    }
            if (children.size() == 1) { {if (true) return children.get(0);} }
                else { {if (true) return new SequencePattern.OrPatternExpr(children);}  }
    throw new Error("Missing return statement in function");
  }

  final public SequencePattern.PatternExpr SeqRegexGroup(SequencePattern.Env env) throws ParseException {
  SequencePattern.PatternExpr expr;
  boolean capturing = true;
  String varname = null;
  Token var;
    jj_consume_token(20);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
    case 21:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        jj_consume_token(21);
                capturing = false;
        break;
      case 14:
        jj_consume_token(14);
        var = jj_consume_token(VAR);
                           varname = var.image;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    expr = SeqRegex(env);
    jj_consume_token(22);
                if (varname != null) {
                   {if (true) return new SequencePattern.GroupPatternExpr(expr, varname);}
                } else {
                   {if (true) return new SequencePattern.GroupPatternExpr(expr, capturing);}
        }
    throw new Error("Missing return statement in function");
  }

  final public NodePattern BracketedNode(SequencePattern.Env env) throws ParseException {
  NodePattern node;
    if (jj_2_3(2)) {
      jj_consume_token(23);
      jj_consume_token(24);
              node = NodePattern.ANY_NODE;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        jj_consume_token(23);
        node = NodeDisjConj(env);
        jj_consume_token(24);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public SequencePattern.PatternExpr SeqVar(SequencePattern.Env env) throws ParseException {
  SequencePattern.PatternExpr expr;
  Token name;
    name = jj_consume_token(VAR);
        expr = env.getSequencePatternExpr(name.image, true);
        if (expr == null) {
            {if (true) throw new Error("Unknown sequence pattern variable " + name.image);}
        }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public SequencePattern.PatternExpr SeqBackRef(SequencePattern.Env env) throws ParseException {
  Token name;
    name = jj_consume_token(BACKREF);
        int v = Integer.parseInt(name.image.substring(1));
        {if (true) return new SequencePattern.BackRefPatternExpr(CoreMapNodePattern.TEXT_ATTR_EQUAL_CHECKER, v);}
    throw new Error("Missing return statement in function");
  }

  final public NodePattern Node(SequencePattern.Env env) throws ParseException {
  NodePattern node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
      node = BracketedNode(env);
      break;
    case IDENTIFIER:
    case VAR:
    case REGEX:
    case STR:
    case BARESTR:
    case 16:
    case 20:
    case 26:
      node = NodeGroup(env);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public NodePattern NodeDisj(SequencePattern.Env env) throws ParseException {
        List<NodePattern> children = new ArrayList<NodePattern>();
        NodePattern child;
    child = NodeGroup(env);
                                 children.add(child);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(19);
      child = NodeGroup(env);
                                        children.add(child);
    }
          if (children.size() == 1)
                {if (true) return child;}
          else
                {if (true) return new NodePattern.DisjNodePattern(children);}
    throw new Error("Missing return statement in function");
  }

  final public NodePattern NodeConj(SequencePattern.Env env) throws ParseException {
        NodePattern child;
        List children = new ArrayList();
    child = NodeGroup(env);
                                children.add(child);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(25);
      child = NodeGroup(env);
                                        children.add(child);
    }
          if (children.size() == 1)
                {if (true) return child;}
          else
                {if (true) return new NodePattern.ConjNodePattern(children);}
    throw new Error("Missing return statement in function");
  }

  final public NodePattern NodeDisjConj(SequencePattern.Env env) throws ParseException {
        NodePattern child;
        List<NodePattern> disjChildren = new ArrayList<NodePattern>();
        List<NodePattern> conjChildren = new ArrayList<NodePattern>();
        Token op;
    child = NodeGroup(env);
                                conjChildren.add(child);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
      case 25:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        op = jj_consume_token(25);
        break;
      case 19:
        op = jj_consume_token(19);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      child = NodeGroup(env);
             if ("&".equals(op.image)) {
              conjChildren.add(child);
             } else if ("|".equals(op.image)) {
               if (conjChildren.size() > 1) {
                  disjChildren.add(new NodePattern.ConjNodePattern(conjChildren));
               } else {
                  disjChildren.add(conjChildren.get(0));
               }
               conjChildren = new ArrayList<NodePattern>();
               conjChildren.add(child);
             }
    }
          if (conjChildren.size() > 1) {
             disjChildren.add(new NodePattern.ConjNodePattern(conjChildren));
          } else {
             disjChildren.add(conjChildren.get(0));
          }
          if (disjChildren.size() == 1)
                {if (true) return disjChildren.get(0);}
          else
                {if (true) return new NodePattern.DisjNodePattern(disjChildren);}
    throw new Error("Missing return statement in function");
  }

  final public NodePattern NodeGroup(SequencePattern.Env env) throws ParseException {
  NodePattern node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case VAR:
    case REGEX:
    case STR:
    case BARESTR:
    case 16:
    case 26:
      node = NodeBasic(env);
      break;
    case 20:
      jj_consume_token(20);
      node = NodeDisjConj(env);
      jj_consume_token(22);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public NodePattern NodeBasic(SequencePattern.Env env) throws ParseException {
        NodePattern child;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      child = CoreMapNode(env);
          {if (true) return new NodePattern.NegateNodePattern(child);}
      break;
    case IDENTIFIER:
    case VAR:
    case REGEX:
    case STR:
    case BARESTR:
    case 16:
      child = CoreMapNode(env);
          {if (true) return child;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodePattern CoreMapNode(SequencePattern.Env env) throws ParseException {
    Map<String, String> attributes = new ArrayMap<String,String>();
    NodePattern pat;
        Token value = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case REGEX:
    case STR:
    case BARESTR:
    case 16:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        jj_consume_token(16);
        AttrValue(env, attributes);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 27:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_6;
          }
          jj_consume_token(27);
          AttrValue(env, attributes);
        }
        jj_consume_token(17);
        break;
      case IDENTIFIER:
      case REGEX:
      case STR:
      case BARESTR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STR:
          value = jj_consume_token(STR);
          break;
        case REGEX:
          value = jj_consume_token(REGEX);
          break;
        case BARESTR:
          value = jj_consume_token(BARESTR);
          break;
        case IDENTIFIER:
          value = jj_consume_token(IDENTIFIER);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                        attributes.put("word", value.image);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          pat = CoreMapNodePattern.valueOf(env, attributes);
          {if (true) return pat;}
      break;
    case VAR:
      pat = CoreMapVarNodePattern(env);
            {if (true) return pat;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Map<String,String> AttrValue(SequencePattern.Env env, Map<String,String> attributes) throws ParseException {
        Token attr = null;
        Token value = null;
        Token tok = null;
        String str = null;
    attr = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      jj_consume_token(28);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STR:
        value = jj_consume_token(STR);
        break;
      case REGEX:
        value = jj_consume_token(REGEX);
        break;
      case BARESTR:
        value = jj_consume_token(BARESTR);
        break;
      case IDENTIFIER:
        value = jj_consume_token(IDENTIFIER);
        break;
      case VAR:
        str = CoreMapVarValue(env);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 29:
      tok = jj_consume_token(29);
      value = jj_consume_token(IDENTIFIER);
      break;
    case NUMCMP:
      tok = jj_consume_token(NUMCMP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        value = jj_consume_token(INT);
        break;
      case REAL:
        value = jj_consume_token(REAL);
        break;
      case VAR:
        str = CoreMapVarValue(env);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
              if (value != null) { str = value.image; }
              if (tok != null) { str = tok.image + str; }
              if (attr != null && str != null)  {
                if (attributes.containsKey(attr.image)) {
                {if (true) throw new Error("Attribute match already defined: " + attr.image);}
                }
                attributes.put(attr.image, str);
              }
          {if (true) return attributes;}
    throw new Error("Missing return statement in function");
  }

  final public NodePattern CoreMapWordPattern(SequencePattern.Env env) throws ParseException {
    Map<String, String> attributes = new ArrayMap<String,String>();
    CoreMapNodePattern pat;
        Token value = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STR:
      value = jj_consume_token(STR);
      break;
    case REGEX:
      value = jj_consume_token(REGEX);
      break;
    case BARESTR:
      value = jj_consume_token(BARESTR);
      break;
    case IDENTIFIER:
      value = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                  attributes.put("word", value.image);
          pat = CoreMapNodePattern.valueOf(env, attributes);
          {if (true) return pat;}
    throw new Error("Missing return statement in function");
  }

  final public MultiNodePattern MultiNodePattern(SequencePattern.Env env) throws ParseException {
    NodePattern pat;
    MultiNodePattern mp;
    Token v1, v2;
    int min = 1, max = -1;
    jj_consume_token(30);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      if (jj_2_4(3)) {
        jj_consume_token(16);
        v1 = jj_consume_token(INT);
        jj_consume_token(17);
       min = Integer.parseInt(v1.image);
       max = Integer.parseInt(v1.image);
      } else if (jj_2_5(4)) {
        jj_consume_token(16);
        v1 = jj_consume_token(INT);
        jj_consume_token(18);
        jj_consume_token(17);
       min = Integer.parseInt(v1.image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          jj_consume_token(16);
          v1 = jj_consume_token(INT);
          jj_consume_token(18);
          v2 = jj_consume_token(INT);
          jj_consume_token(17);
       min = Integer.parseInt(v1.image);
       max = Integer.parseInt(v2.image);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    pat = CoreMapWordPattern(env);
      mp = new MultiCoreMapNodePattern(pat);
      mp.setMinNodes(min);
      mp.setMaxNodes(max);
      {if (true) return mp;}
    throw new Error("Missing return statement in function");
  }

  final public String CoreMapVarValue(SequencePattern.Env env) throws ParseException {
        Token value = null;
    value = jj_consume_token(VAR);
                            {if (true) return (String) env.get(value.image);}
    throw new Error("Missing return statement in function");
  }

  final public NodePattern CoreMapVarNodePattern(SequencePattern.Env env) throws ParseException {
        Token value = null;
    value = jj_consume_token(VAR);
                            {if (true) return env.getNodePattern(value.image);}
    throw new Error("Missing return statement in function");
  }

  final public Pair<SequencePattern.PatternExpr, SequenceMatchAction<CoreMap>> SeqRegexWithAction(SequencePattern.Env env) throws ParseException {
  SequencePattern.PatternExpr expr;
  SequenceMatchAction<CoreMap> action = null;
    expr = SeqRegex(env);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      action = Action(env);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
      {if (true) return new Pair<SequencePattern.PatternExpr, SequenceMatchAction<CoreMap>>(expr,action);}
    throw new Error("Missing return statement in function");
  }

  final public SequenceMatchAction<CoreMap> Action(SequencePattern.Env env) throws ParseException {
   SequenceMatchAction<CoreMap> action;
    jj_consume_token(31);
    action = AnnotateAction(env);
    {if (true) return action;}
    throw new Error("Missing return statement in function");
  }

  final public SequenceMatchAction<CoreMap> AnnotateAction(SequencePattern.Env env) throws ParseException {
  Map<String, String> attributes;
    jj_consume_token(32);
    jj_consume_token(20);
    //  group = <INT> ","
      attributes = SetAttrValues(env);
    jj_consume_token(22);
    {if (true) return new CoreMapSequenceMatchAction.AnnotateAction<CoreMap>( /*group,*/ attributes);}
    throw new Error("Missing return statement in function");
  }

  final public Map<String,String> SetAttrValues(SequencePattern.Env env) throws ParseException {
    Map<String, String> attributes = new ArrayMap<String,String>();
    jj_consume_token(16);
    SetAttrValue(env, attributes);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_7;
      }
      jj_consume_token(27);
      SetAttrValue(env, attributes);
    }
    jj_consume_token(17);
          {if (true) return attributes;}
    throw new Error("Missing return statement in function");
  }

  final public Map<String,String> SetAttrValue(SequencePattern.Env env, Map<String,String> attributes) throws ParseException {
        Token attr = null;
        Token value = null;
        String str = null;
    attr = jj_consume_token(IDENTIFIER);
    jj_consume_token(33);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STR:
      value = jj_consume_token(STR);
      break;
    case BARESTR:
      value = jj_consume_token(BARESTR);
      break;
    case IDENTIFIER:
      value = jj_consume_token(IDENTIFIER);
      break;
    case INT:
      value = jj_consume_token(INT);
      break;
    case REAL:
      value = jj_consume_token(REAL);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
              if (value != null) { str = value.image; }
              if (attr != null && str != null)  {
                if (attributes.containsKey(attr.image)) {
                {if (true) throw new Error("Attribute already defined: " + attr.image);}
                }
                attributes.put(attr.image, str);
              }
          {if (true) return attributes;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(16)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(17)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(16)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(17)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(23)) return true;
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(16)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(17)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(16)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(17)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public TokenSequenceParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40900e70,0x1e000,0x40900e70,0xe000,0x10000,0x4000,0x80000,0x204000,0x204000,0x800000,0x4910e30,0x80000,0x2000000,0x2080000,0x2080000,0x4110e30,0x4010e30,0x8000000,0xe10,0x10e10,0x10e30,0xe30,0x1a0,0x30001000,0xe10,0x10000,0x10000,0x80000000,0x8000000,0xd90,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TokenSequenceParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TokenSequenceParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TokenSequenceParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TokenSequenceParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TokenSequenceParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TokenSequenceParser(TokenSequenceParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TokenSequenceParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
